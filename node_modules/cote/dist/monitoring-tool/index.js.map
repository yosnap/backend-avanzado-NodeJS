{"version":3,"sources":["../../src/monitoring-tool/index.js"],"names":["module","exports","port","fs","require","_","cote","portfinder","server","createServer","handler","io","listen","monitor","Monitor","name","disableScreen","sockend","Sockend","namespace","key","publisher","Publisher","broadcasts","graph","nodes","links","rawLinks","onPort","err","on","code","getPort","status","node","discovery","id","processId","me","source","target","removedNode","nodeId","rawLink","removedNodeIndex","indexOf","splice","length","setInterval","hosts","getHosts","concat","processes","getProcesses","getNodes","indexMap","forEach","index","getLinks","publish","req","res","readFile","__dirname","data","writeHead","end","groupBy","map","process","type","processCommand","filter","nodesByHosts","nodesByHost","hostId","nodesByProcess","processNodes","Object","keys","host","advertisement","simplifiedNodes","flatten","link"],"mappings":"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","file":"index.js","sourcesContent":["module.exports = function(port) {\n    const fs = require('fs');\n    const _ = require('lodash');\n    const cote = require('../');\n    const portfinder = require('portfinder');\n\n    const server = require('http').createServer(handler);\n    const io = require('socket.io').listen(server);\n\n    // Instantiate a monitor, sockend and publisher components\n    const monitor = new cote.Monitor({\n        name: 'monitor',\n    }, { disableScreen: true });\n\n    const sockend = new cote.Sockend(io, {\n        name: 'sockend',\n        namespace: 'monitoring',\n        key: 'monitoring',\n    });\n\n    const publisher = new cote.Publisher({\n        name: 'status publisher',\n        broadcasts: ['statusUpdate'],\n        namespace: 'monitoring',\n        key: 'monitoring',\n    });\n\n    // Graph related variables\n    const graph = {\n        nodes: [],\n        links: [],\n    };\n    const rawLinks = {};\n\n    const onPort = (err, port) => {\n        server.listen(port);\n        server.on('error', (err) => {\n            if (err.code != 'EADDRINUSE') throw err;\n\n            portfinder.getPort({ port }, onPort);\n        });\n    };\n\n    portfinder.getPort({ port: port || 5555 }, onPort);\n\n    monitor.on('status', function(status) {\n        const node = monitor.discovery.nodes[status.id];\n        if (!node) return;\n\n        if (node.processId == monitor.discovery.me.processId) return;\n\n        rawLinks[status.id] = {\n            source: status.id,\n            target: status.nodes,\n        };\n    });\n\n    monitor.discovery.on('removed', function(node) {\n        delete rawLinks[node.id];\n        const removedNode = node.id;\n\n        for (let nodeId in rawLinks) {\n            const rawLink = rawLinks[nodeId];\n\n            const removedNodeIndex = rawLink.target.indexOf(removedNode);\n            if (removedNodeIndex > -1) {\n                rawLink.target.splice(removedNodeIndex, 1);\n                if (!rawLink.target.length) delete rawLinks[nodeId];\n            }\n        }\n    });\n\n    setInterval(function() {\n        graph.nodes = [];\n\n        const hosts = getHosts(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(hosts);\n\n        const processes = getProcesses(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(processes);\n\n        const nodes = getNodes(monitor.discovery.nodes);\n        graph.nodes = graph.nodes.concat(nodes);\n\n        // Update links\n        const indexMap = {};\n        graph.nodes.forEach(function(node, index) {\n            indexMap[node.id] = index;\n        });\n        graph.links = getLinks(rawLinks, indexMap);\n\n        // Publish the output\n        publisher.publish('statusUpdate', graph);\n    }, 5000);\n\n    function handler(req, res) {\n        fs.readFile(__dirname + '/frontend/index.html', function(err, data) {\n            if (err) {\n                res.writeHead(500);\n                return res.end('Error loading index.html');\n            }\n            res.writeHead(200);\n            res.end(data);\n        });\n    }\n\n    function getProcesses(nodes) {\n        const processes = _.groupBy(nodes, 'processId');\n\n        return _.map(processes, (process, processId) => (\n            {\n                id: processId,\n                type: 'process',\n                name: process[0].processCommand,\n            }\n        )).filter(function(process) {\n            return process.id != monitor.discovery.me.processId;\n        });\n    }\n\n    function getHosts(nodes) {\n        const nodesByHosts = _.groupBy(nodes, 'hostName');\n\n        _.forEach(nodesByHosts, (nodesByHost, hostId) => {\n            const nodesByProcess = _.groupBy(nodesByHost, 'processId');\n\n            _.forEach(nodesByProcess, (processNodes, processId) => {\n                if (processId == monitor.discovery.me.processId) return;\n\n                rawLinks[processId] = {\n                    source: processId,\n                    target: processNodes.map(function(node) {\n                        return node.id;\n                    }),\n                };\n            });\n\n            rawLinks[hostId] = {\n                source: hostId,\n                target: Object.keys(nodesByProcess),\n            };\n        });\n\n        let hosts = Object.keys(nodesByHosts);\n        hosts = _.map(hosts, (host) => ({\n            id: host,\n            type: 'host',\n            name: host,\n        }));\n        return hosts;\n    }\n\n    function getNodes(nodes) {\n        nodes = _.filter(nodes, (node) =>\n            node.processId != monitor.discovery.me.processId &&\n            node.advertisement.name != 'sockendSub' &&\n            node.advertisement.name != 'sockendReq'\n        );\n\n        const simplifiedNodes = _.map(nodes, (node) => ({\n            id: node.id,\n            type: 'node',\n            name: node.advertisement.name,\n        }));\n\n        return simplifiedNodes;\n    }\n\n    function getLinks(rawLinks, indexMap) {\n        const links = _.map(rawLinks,\n            (rawLink) => rawLink.target.map(\n                (target) => ({ // flip source & target for semantics :)\n                    source: indexMap[target], // monitor.discovery.nodes[target].advertisement.name + '#' + target,\n                    target: indexMap[rawLink.source], // monitor.discovery.nodes[rawLink.source].advertisement.name +\n                                                      // '#' + rawLink.source\n                })\n            )\n        );\n\n        return _.flatten(links).filter((link) => link.source && link.target);\n    }\n\n    return { monitor, server };\n};\n"]}