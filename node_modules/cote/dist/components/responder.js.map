{"version":3,"sources":["../../src/components/responder.js"],"names":["axon","require","portfinder","Configurable","Component","module","exports","advertisement","discoveryOptions","sock","types","type","on","startDiscovery","req","cb","emit","onPort","err","port","bind","server","code","getPort","host","address","listener","args","rv","then","pop","val","catch"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,OAAOC,QAAQ,gBAAR,CAAb;AACA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,IAAME,eAAeF,QAAQ,gBAAR,CAArB;AACA,IAAMG,YAAYH,QAAQ,aAAR,CAAlB;;AAEAI,OAAOC,OAAP;AAAA;;AACI,uBAAYC,aAAZ,EAA2BC,gBAA3B,EAA6C;AAAA;;AAAA,0HACnCD,aADmC,EACpBC,gBADoB;;AAGzC,cAAKC,IAAL,GAAY,IAAIT,KAAKU,KAAL,CAAW,MAAKC,IAAhB,CAAJ,EAAZ;AACA,cAAKF,IAAL,CAAUG,EAAV,CAAa,MAAb,EAAqB;AAAA,mBAAM,MAAKC,cAAL,EAAN;AAAA,SAArB;;AAEA,cAAKJ,IAAL,CAAUG,EAAV,CAAa,SAAb,EAAwB,UAACE,GAAD,EAAMC,EAAN,EAAa;AACjC,gBAAI,CAACD,IAAIH,IAAT,EAAe;;AAEf,kBAAKK,IAAL,CAAUF,IAAIH,IAAd,EAAoBG,GAApB,EAAyBC,EAAzB;AACH,SAJD;;AAMA,YAAME,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,IAAN,EAAe;AAC1B,kBAAKZ,aAAL,CAAmBY,IAAnB,GAA0B,CAACA,IAA3B;;AAEA,kBAAKV,IAAL,CAAUW,IAAV,CAAeD,IAAf;AACA,kBAAKV,IAAL,CAAUY,MAAV,CAAiBT,EAAjB,CAAoB,OAApB,EAA6B,UAACM,GAAD,EAAS;AAClC,oBAAIA,IAAII,IAAJ,IAAY,YAAhB,EAA8B,MAAMJ,GAAN;;AAE9BhB,2BAAWqB,OAAX,CAAmB;AACfC,0BAAM,MAAKhB,gBAAL,CAAsBiB,OADb;AAEfN,0BAAM,MAAKZ,aAAL,CAAmBY;AAFV,iBAAnB,EAGGF,MAHH;AAIH,aAPD;AAQH,SAZD;;AAcAf,mBAAWqB,OAAX,CAAmB;AACfC,kBAAM,MAAKhB,gBAAL,CAAsBiB,OADb;AAEfN,kBAAMZ,cAAcY;AAFL,SAAnB,EAGGF,MAHH;AA1ByC;AA8B5C;;AA/BL;AAAA;AAAA,2BAiCON,IAjCP,EAiCae,QAjCb,EAiCuB;AACf,qHAASf,IAAT,EAAe,YAAa;AAAA,kDAATgB,IAAS;AAATA,wBAAS;AAAA;;AACxB,oBAAMC,KAAKF,0BAAYC,IAAZ,CAAX;;AAEA,oBAAIC,MAAM,OAAOA,GAAGC,IAAV,IAAkB,UAA5B,EAAwC;AACpC,wBAAMd,KAAKY,KAAKG,GAAL,EAAX;AACAF,uBAAGC,IAAH,CAAQ,UAACE,GAAD;AAAA,+BAAShB,GAAG,IAAH,EAASgB,GAAT,CAAT;AAAA,qBAAR,EAAgCC,KAAhC,CAAsCjB,EAAtC;AACH;AACJ,aAPD;AAQH;AA1CL;AAAA;AAAA,4BA4Ce;AACP,mBAAO,KAAP;AACH;AA9CL;AAAA;AAAA,4BAgDe;AACP,mBAAO,KAAP;AACH;AAlDL;;AAAA;AAAA,EAAyCZ,aAAaC,SAAb,CAAzC","file":"responder.js","sourcesContent":["const axon = require('@dashersw/axon');\nconst portfinder = require('portfinder');\nconst Configurable = require('./configurable');\nconst Component = require('./component');\n\nmodule.exports = class Responder extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.sock = new axon.types[this.type]();\n        this.sock.on('bind', () => this.startDiscovery());\n\n        this.sock.on('message', (req, cb) => {\n            if (!req.type) return;\n\n            this.emit(req.type, req, cb);\n        });\n\n        const onPort = (err, port) => {\n            this.advertisement.port = +port;\n\n            this.sock.bind(port);\n            this.sock.server.on('error', (err) => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({\n                    host: this.discoveryOptions.address,\n                    port: this.advertisement.port,\n                }, onPort);\n            });\n        };\n\n        portfinder.getPort({\n            host: this.discoveryOptions.address,\n            port: advertisement.port,\n        }, onPort);\n    }\n\n    on(type, listener) {\n        super.on(type, (...args) => {\n            const rv = listener(...args);\n\n            if (rv && typeof rv.then == 'function') {\n                const cb = args.pop();\n                rv.then((val) => cb(null, val)).catch(cb);\n            }\n        });\n    }\n\n    get type() {\n        return 'rep';\n    }\n\n    get oppo() {\n        return 'req';\n    }\n};\n"]}