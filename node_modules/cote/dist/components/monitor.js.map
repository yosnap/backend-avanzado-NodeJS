{"version":3,"sources":["../../src/components/monitor.js"],"names":["portfinder","require","_","charm","Configurable","Component","axon","module","exports","advertisement","discoveryOptions","stream","type","defaults","monitor","log","sock","SubEmitterSocket","startDiscovery","on","status","emit","onPort","err","port","bind","server","code","getPort","host","address","disableScreen","interval","pipe","process","stdout","reset","erase","position","write","draw","index","foreground","move","discovery","eachNode","node","name","slice","length","id","setTimeout"],"mappings":"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","file":"monitor.js","sourcesContent":["const portfinder = require('portfinder');\nconst _ = require('lodash');\nconst charm = require('charm')();\nconst Configurable = require('./configurable');\nconst Component = require('./component');\nconst axon = require('@dashersw/axon');\n\nmodule.exports = class Monitor extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions, stream) {\n        advertisement.type = 'monitor';\n\n        _.defaults(discoveryOptions, {\n            monitor: true,\n            log: false,\n        });\n        super(advertisement, discoveryOptions);\n\n        this.sock = new axon.SubEmitterSocket();\n        this.startDiscovery();\n\n        this.sock.on('status', (status) => this.emit('status', status));\n\n        const onPort = (err, port) => {\n            advertisement.port = +port;\n\n            this.sock.bind(port);\n            this.sock.sock.server.on('error', (err) => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({\n                    host: this.discoveryOptions.address,\n                    port: this.advertisement.port,\n                }, onPort);\n            });\n        };\n\n        portfinder.getPort({\n            host: this.discoveryOptions.address,\n            port: this.advertisement.port,\n        }, onPort);\n\n\n        if (this.discoveryOptions.disableScreen) return;\n\n        const interval = this.discoveryOptions.interval || 5000;\n\n        charm.pipe(stream || process.stdout);\n        charm.reset().erase('screen').position(0, 0).\n            write('                                                                                    ');\n\n        const draw = () => {\n            charm.erase('screen');\n            let index = 3;\n            charm.position(0, 2);\n            charm.foreground('green').\n                write('Name').move(16).\n                write('id').move(37).\n                write('Address').move(11).\n                write('Port');\n\n            charm.erase('down');\n\n            this.discovery.eachNode((node) => {\n                let port = node.advertisement.port || '----';\n                port += '';\n                charm.position(0, index).foreground('cyan').\n                    write(node.advertisement.name.slice(0, 20)).move(20 - node.advertisement.name.length, 0).\n                    foreground('magenta').write(node.id).move(3, 0).\n                    foreground('yellow').write(node.address).move(3, 0).\n                    foreground('red').write(port);\n                index++;\n            });\n\n            charm.position(0, 1);\n\n            setTimeout(draw, interval);\n        };\n\n        draw();\n    }\n};\n"]}