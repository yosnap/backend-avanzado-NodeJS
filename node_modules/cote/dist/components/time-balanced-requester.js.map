{"version":3,"sources":["../../src/components/time-balanced-requester.js"],"names":["Requester","require","_","uuid","module","exports","advertisement","discoveryOptions","responders","timers","requestId","callbacks","MAX_REQUESTS","CALCULATION_TIMEOUT","SAMPLE_INTERVAL","setInterval","now","Date","index","id","sent","clearInterval","sock","on","responder","Error","reject","args","hasCallback","length","pop","resolve","Promise","_resolve","_reject","originalPromise","socks","len","minAvgResponseTime","Number","MAX_VALUE","minIndex","average","size","item","totalTime","request","time","findIndex","Math","floor","random","s","n","v4","cb","lastRequests","stats","averageTime","state","then","res","catch","err"],"mappings":"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","file":"time-balanced-requester.js","sourcesContent":["const Requester = require('./requester');\nconst _ = require('lodash');\nconst uuid = require('uuid');\n\nmodule.exports = class TimeBalancedRequester extends Requester {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.responders = {};\n        this.timers = {};\n        this.requestId = 0;\n        this.callbacks = {};\n        this.MAX_REQUESTS = 10;\n        this.CALCULATION_TIMEOUT = 10000;\n        this.SAMPLE_INTERVAL = 100;\n\n        // neglect requests from calculation this took longer then the given timeout\n        setInterval(() => {\n            const now = new Date();\n\n            for (let index in this.responders) {\n                for (let id in this.responders[index]) {\n                    if (now - this.responders[index][id].sent > this.CALCULATION_TIMEOUT) {\n                        if (this.timers[id])\n                            clearInterval(this.timers[id]); // if the response is lost, don't leave garbage\n\n                        delete this.responders[index][id];\n                    }\n                }\n            }\n        }, this.SAMPLE_INTERVAL);\n\n        // clear all gathered data when a socket disconnects\n        this.sock.on('socket close', (sock) => {\n            if (sock.uuid) {\n                const responder = this.responders[sock.uuid];\n\n                for (let id in responder) { // clear timers and callbacks for the disconnected socket\n                    clearInterval(this.timers[id]);\n                    delete this.timers[id];\n\n                    if (typeof this.callbacks[id] == 'function') {\n                        this.callbacks[id](new Error('lost connection'));\n                    } else {\n                        this.callbacks[id] && this.callbacks[id].reject(new Error('lost connection'));\n                    }\n                    delete this.callbacks[id];\n                }\n                delete this.responders[sock.uuid];\n            }\n        });\n    }\n\n    send(...args) {\n        const id = this.requestId++;\n\n        const hasCallback = 'function' == typeof args[args.length - 1];\n        if (hasCallback)\n            this.callbacks[id] = args.pop();\n        else {\n            let resolve;\n            let reject;\n            this.callbacks[id] = new Promise((_resolve, _reject) => {\n                resolve = _resolve;\n                reject = _reject;\n            });\n\n            this.callbacks[id].resolve = resolve;\n            this.callbacks[id].reject = reject;\n        }\n\n        let originalPromise;\n\n        let index = 0;\n        const socks = this.sock.socks;\n        const len = socks.length;\n        let minAvgResponseTime = Number.MAX_VALUE;\n        let minIndex = 0;\n        let average = 0;\n\n        if (len > 0 && _.size(this.responders) == len) { // have data for all sockets\n            for (index in this.responders) {\n                const item = this.responders[index];\n                let totalTime = 0;\n\n                for (let request in item) {\n                    const time = item[request].time || 0;\n                    totalTime += time;\n                }\n                average = totalTime / _.size(item) || 0;\n\n                if (average < minAvgResponseTime) {\n                    minAvgResponseTime = average;\n                    minIndex = index;\n                }\n                this.responders[index].average = average;\n            }\n\n            minIndex = _.findIndex(socks, { uuid: minIndex });\n\n            // explore other servers every once in a while\n            if (id % this.MAX_REQUESTS == 0) {\n                minIndex = Math.floor(Math.random() * len);\n            }\n        } else if (len != 0) { // there is a new socket to be explored use it\n            minIndex = _.findIndex(socks, (s) => !s.uuid);\n        }\n\n        let n = this.sock.n = (minIndex % len) || 0; // select the socket to be used\n        if (!this.sock.socks[n]) n = this.sock.n = 0;\n        if (socks[n] && typeof socks[n].uuid == 'undefined')\n            socks[n].uuid = uuid.v4(); // assign a unique identifier to this socket\n\n        index = (socks[n] && socks[n].uuid) || 0; // save the index of selected socket\n\n        const cb = (...args) => {\n            const lastRequests = this.responders[index];\n            if (lastRequests && lastRequests[id])\n                lastRequests[id].time = (new Date() - lastRequests[id].sent); // save response time\n            clearInterval(this.timers[id]); // clear timers for this request\n            delete this.timers[id];\n\n            const stats = { averageTime: (lastRequests && lastRequests.average) || 0 };\n\n            if (hasCallback) {\n                this.callbacks[id](...args, stats);\n            } else {\n                if (originalPromise.state == 'rejected') this.callbacks[id].reject(args[0]);\n                else this.callbacks[id].resolve(args[0]);\n            }\n            delete this.callbacks[id];\n        };\n\n        if (index != 0) {\n            if (!this.responders[index]) this.responders[index] = {}; // create if it's the first request for this index\n            this.responders[index][id] = { // create a container object\n                time: 0,\n                sent: new Date(),\n            };\n\n            // increment responseTime of this request every 0.1 seconds\n            this.timers[id] = setInterval(() => {\n                const lastRequests = this.responders[index];\n                if (!lastRequests) return clearInterval(this.timers[id]);\n\n                if (lastRequests[id]) lastRequests[id].time += this.SAMPLE_INTERVAL;\n            }, this.SAMPLE_INTERVAL);\n        }\n\n        if (hasCallback) return super.send(...args, cb);\n        else {\n            originalPromise = super.send(...args);\n            originalPromise.then((res) => {\n                originalPromise.state = 'resolved';\n                cb(res);\n            }).catch((err) => {\n                originalPromise.state = 'rejected';\n                cb(err);\n            });\n            return this.callbacks[id];\n        }\n    };\n};\n"]}